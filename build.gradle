// Top-level build file where you can add configuration options common to all sub-projects/modules.
apply from:'config.gradle'

buildscript {

    //防止如下问题：
    // Gradle version 2.10 is required. Current version is 2.5.
    // If using the gradle wrapper, try editing the distributionUrl
    // in xxx/gradle/wrapper/gradle-wrapper.properties to gradle-2.10-all.zip
    System.properties['com.android.build.gradle.overrideVersionCheck'] = 'true'

    repositories {
        maven { url 'https://maven.google.com' }
        //添加fir maven源
        maven {
            //url "http://maven.bughd.com/public"
            url uri('./localmaven')//改为本地，远程仓库关闭
        }
        jcenter()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:2.3.0'
        //这里配置 apt 供butterknife使用
        // classpath 'com.neenbedankt.gradle.plugins:android-apt:1.8'
        //GreenDao3依赖
        classpath 'org.greenrobot:greendao-gradle-plugin:3.2.1'
        // tinkersupport插件(1.0.3以上无须再配置tinker插件）
        classpath 'com.tencent.bugly:tinker-support:1.1.1'
        // 多渠道插件（多渠道打包推荐使用）
        classpath 'com.meituan.android.walle:plugin:1.1.3'
        //徐宜生大大封装的AspectJ库
        classpath 'com.hujiang.aspectjx:gradle-android-plugin-aspectjx:1.0.8'
        //apt
        classpath 'com.neenbedankt.gradle.plugins:android-apt:1.8'
        //添加fir插件依赖
        classpath 'im.fir:gradle-fir-publisher:1.0.7'
    }
}

allprojects {
    repositories {
        jcenter()
        maven { url 'https://maven.google.com' }
        maven { url "https://jitpack.io" }
        //添加fir maven源
        maven {
            //url "http://maven.bughd.com/public"
            url uri('./localmaven')//改为本地，远程仓库关闭
        }
    }
}

task clean(type: Delete) {
    delete rootProject.buildDir
}

//自定义task
task printProperties << {
    println 'project标识=' + project
    println 'project名字=' + project.name
    println 'project构建目录=' + project.buildDir
    println 'project构建文件=' + project.buildFile
    println 'project版本信息=' + project.version
    println 'task名字=' + name
    println 'project构建文件存放目录=' + buildDir
    println 'task的全限定路径名=' + path
}

//导出jar,注意makeJar依赖于build生成的class文件，so，也可以这样写：makeJar.dependsOn(build)
task makeJar(type: Jar) {
    //清空已存在的jar
    delete 'libs/ljyU.jar'
    //指定生成的jar文件名
    baseName "./app/libs/ljyU"
    //从class文件生成jar宝
    from "./lib/build/intermediates/classes/release/com/ljy/util"
    into "com/ljy/util"
    //去掉不需要打包的目录和文件
    exclude "db", "disklrucache", "R.class"
    //去掉R文件
    exclude { it.name.startsWith('R$') }
}

task helloW{
    println('hello world')
    doFirst{
        println('do first')
    }
    doLast{
        println('do last')
    }
}

task test0{
    println("I'm test 0")
}

task test1{
    println("I'm test 1")
}

//使test0依赖于test1，即要执行test0会先执行test1
test0.dependsOn test1
